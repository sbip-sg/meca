// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cpt

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CptMetaData contains all meta data concerning the Cpt contract.
var CptMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"credentialPublicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"credentialProof\",\"type\":\"bytes\"}],\"name\":\"CredentialTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cptVersion\",\"type\":\"int256\"}],\"name\":\"RegisterCptRetLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"retCode\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cptVersion\",\"type\":\"int256\"}],\"name\":\"UpdateCptRetLog\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUTHORITY_ISSUER_START_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NONE_AUTHORITY_ISSUER_START_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getClaimPoliciesFromCptMap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"presentationId\",\"type\":\"uint256\"}],\"name\":\"getClaimPoliciesFromPresentationMap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getCptBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[8]\",\"name\":\"bytes32Array\",\"type\":\"bytes32[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dataStorageAddress\",\"type\":\"address\"}],\"name\":\"getCptDynamicBytes32Array\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dataStorageAddress\",\"type\":\"address\"}],\"name\":\"getCptDynamicIntArray\",\"outputs\":[{\"internalType\":\"int256[]\",\"name\":\"\",\"type\":\"int256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"dataStorageAddress\",\"type\":\"address\"}],\"name\":\"getCptDynamicJsonSchemaArray\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCptId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCptIdFromIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"getCptIdList\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getCptIntArray\",\"outputs\":[{\"internalType\":\"int256[8]\",\"name\":\"intArray\",\"type\":\"int256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getCptJsonSchemaArray\",\"outputs\":[{\"internalType\":\"bytes32[32]\",\"name\":\"jsonSchemaArray\",\"type\":\"bytes32[32]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getCptPublisher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getCptSignature\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"getCredentialTemplateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDatasetLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCptId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"isCptExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"uintArray\",\"type\":\"uint256[]\"}],\"name\":\"putClaimPoliciesIntoCptMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"uintArray\",\"type\":\"uint256[]\"}],\"name\":\"putClaimPoliciesIntoPresentationMap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"cptPublisher\",\"type\":\"address\"},{\"internalType\":\"int256[8]\",\"name\":\"cptIntArray\",\"type\":\"int256[8]\"},{\"internalType\":\"bytes32[8]\",\"name\":\"cptBytes32Array\",\"type\":\"bytes32[8]\"},{\"internalType\":\"bytes32[32]\",\"name\":\"cptJsonSchemaArray\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint8\",\"name\":\"cptV\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"cptR\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"cptS\",\"type\":\"bytes32\"}],\"name\":\"putCpt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"credentialPublicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"credentialProof\",\"type\":\"bytes\"}],\"name\":\"putCredentialTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"}],\"name\":\"queryCpt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"intArray\",\"type\":\"int256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"bytes32Array\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"jsonSchemaArray\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"int256[8]\",\"name\":\"intArray\",\"type\":\"int256[8]\"},{\"internalType\":\"bytes32[8]\",\"name\":\"bytes32Array\",\"type\":\"bytes32[8]\"},{\"internalType\":\"bytes32[32]\",\"name\":\"jsonSchemaArray\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"registerCpt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cptId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"publisher\",\"type\":\"address\"},{\"internalType\":\"int256[8]\",\"name\":\"intArray\",\"type\":\"int256[8]\"},{\"internalType\":\"bytes32[8]\",\"name\":\"bytes32Array\",\"type\":\"bytes32[8]\"},{\"internalType\":\"bytes32[32]\",\"name\":\"jsonSchemaArray\",\"type\":\"bytes32[32]\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"updateCpt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526103e85f55621e84806001556001600b55348015610020575f80fd5b50612c5d8061002e5f395ff3fe608060405234801561000f575f80fd5b506004361061018b575f3560e01c806366d6a90b116100dc578063d2a3b53d11610095578063e083a3ad1161006f578063e083a3ad14610546578063e5741ff314610564578063e5a34e6e14610596578063f00245ab146105c65761018b565b8063d2a3b53d146104b6578063d4eb8a42146104e6578063d6edb44e146105165761018b565b806366d6a90b146103bc5780636da223b7146103ec5780636fce6bb31461041c578063a07bd9b51461043a578063b3cc5e751461046a578063cd3a3465146104865761018b565b80633d6c482311610149578063497588e911610123578063497588e9146102f55780635ca35abf1461032657806362238a791461035c578063628e526f1461038c5761018b565b80633d6c48231461027957806342e8f8e9146102a957806347b42f88146102c55761018b565b806227baa41461018f5780631e040fc7146101bf57806323b746f1146101ef5780632984fcc81461021f5780632c0abe1d1461023d5780633d29ba2b1461025b575b5f80fd5b6101a960048036038101906101a49190611b38565b6105e2565b6040516101b69190611c11565b60405180910390f35b6101d960048036038101906101d49190611c2b565b61077c565b6040516101e69190611d20565b60405180910390f35b61020960048036038101906102049190611b38565b6108b2565b6040516102169190611dee565b60405180910390f35b610227610a4c565b6040516102349190611e17565b60405180910390f35b610245610a5a565b6040516102529190611e17565b60405180910390f35b610263610a61565b6040516102709190611e17565b60405180910390f35b610293600480360381019061028e9190611b38565b610aaa565b6040516102a09190611e17565b60405180910390f35b6102c360048036038101906102be9190611f80565b610ac4565b005b6102df60048036038101906102da91906122b5565b610b95565b6040516102ec9190612372565b60405180910390f35b61030f600480360381019061030a9190611b38565b610bd4565b60405161031d92919061239a565b60405180910390f35b610340600480360381019061033b9190611b38565b610c72565b6040516103539796959493929190612508565b60405180910390f35b6103766004803603810190610371919061258a565b610cbf565b60405161038391906125c8565b60405180910390f35b6103a660048036038101906103a19190611b38565b610d75565b6040516103b39190612667565b60405180910390f35b6103d660048036038101906103d19190612681565b610f0f565b6040516103e39190612372565b60405180910390f35b61040660048036038101906104019190611b38565b610f50565b6040516104139190612737565b60405180910390f35b6104246110e2565b6040516104319190611e17565b60405180910390f35b610454600480360381019061044f9190611b38565b6110e8565b6040516104619190611e17565b60405180910390f35b610484600480360381019061047f9190612750565b61110d565b005b6104a0600480360381019061049b9190611b38565b611173565b6040516104ad9190611d20565b60405180910390f35b6104d060048036038101906104cb9190612681565b6111da565b6040516104dd9190612372565b60405180910390f35b61050060048036038101906104fb9190611b38565b61134d565b60405161050d9190612372565b60405180910390f35b610530600480360381019061052b919061258a565b61138c565b60405161053d91906125c8565b60405180910390f35b61054e611442565b60405161055b9190611e17565b60405180910390f35b61057e60048036038101906105799190611b38565b61144e565b60405161058d939291906127aa565b60405180910390f35b6105b060048036038101906105ab919061258a565b6115fe565b6040516105bd91906127df565b60405180910390f35b6105e060048036038101906105db91906128af565b6116b4565b005b6105ea61192f565b5f60025f8481526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201600880602002604051908101604052809291908260088015610697576020028201915b815481526020019060010190808311610683575b50505050508152602001600982016008806020026040519081016040528092919082600880156106dc576020028201915b8154815260200190600101908083116106c8575b5050505050815260200160118201602080602002604051908101604052809291908260208015610721576020028201915b81548152602001906001019080831161070d575b50505050508152602001603182016040518060600160405290815f82015f9054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250508152505090508060400151915050919050565b60605f610787611442565b90505f848210156107e557600167ffffffffffffffff8111156107ad576107ac611e44565b5b6040519080825280602002602001820160405280156107db5781602001602082028036833780820191505090505b50925050506108ac565b83856107f19190612964565b821161080a5784826108039190612997565b905061080e565b8390505b5f8167ffffffffffffffff81111561082957610828611e44565b5b6040519080825280602002602001820160405280156108575781602001602082028036833780820191505090505b5090505f5b828110156108a45761087881886108739190612964565b6110e8565b82828151811061088b5761088a6129ca565b5b602002602001018181525050808060010191505061085c565b508093505050505b92915050565b6108ba611952565b5f60025f8481526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201600880602002604051908101604052809291908260088015610967576020028201915b815481526020019060010190808311610953575b50505050508152602001600982016008806020026040519081016040528092919082600880156109ac576020028201915b815481526020019060010190808311610998575b50505050508152602001601182016020806020026040519081016040528092919082602080156109f1576020028201915b8154815260200190600101908083116109dd575b50505050508152602001603182016040518060600160405290815f82015f9054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250508152505090508060200151915050919050565b5f610a55611442565b905090565b621e848081565b5f5b610a6e60015461134d565b15610a8f5760015f815480929190610a85906129f7565b9190505550610a63565b60015f815480929190610aa1906129f7565b91905055905090565b5f60075f8381526020019081526020015f20549050919050565b8060085f600b5481526020019081526020015f209080519060200190610aeb929190611975565b503360095f600b5481526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fa17f6f29c43d53fdf8a8d5fc788d118621cdca690e8ee29962c3e2fbe70d5eb35f600b546001604051610b7393929190612a8f565b60405180910390a1600b5f815480929190610b8d906129f7565b919050555050565b5f610bc78888888888888860055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661170a565b9050979650505050505050565b60605f60085f8481526020019081526020015f2060095f8581526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681805480602002602001604051908101604052809291908181526020018280548015610c6257602002820191905f5260205f20905b815481526020019060010190808311610c4e575b5050505050915091509150915091565b5f60608060605f805f610ca68860055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611796565b9650965096509650965096509650919395979092949650565b60605f610ccb84610d75565b90505f602067ffffffffffffffff811115610ce957610ce8611e44565b5b604051908082528060200260200182016040528015610d175781602001602082028036833780820191505090505b5090505f5b6020811015610d6957828160208110610d3857610d376129ca565b5b6020020151828281518110610d5057610d4f6129ca565b5b6020026020010181815250508080600101915050610d1c565b50809250505092915050565b610d7d6119c0565b5f60025f8481526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201600880602002604051908101604052809291908260088015610e2a576020028201915b815481526020019060010190808311610e16575b5050505050815260200160098201600880602002604051908101604052809291908260088015610e6f576020028201915b815481526020019060010190808311610e5b575b5050505050815260200160118201602080602002604051908101604052809291908260208015610eb4576020028201915b815481526020019060010190808311610ea0575b50505050508152602001603182016040518060600160405290815f82015f9054906101000a900460ff1660ff1660ff168152602001600182015481526020016002820154815250508152505090508060600151915050919050565b5f610f42898989898989898960055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff166117ef565b905098975050505050505050565b5f8060025f8481526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201600880602002604051908101604052809291908260088015610ffe576020028201915b815481526020019060010190808311610fea575b5050505050815260200160098201600880602002604051908101604052809291908260088015611043576020028201915b81548152602001906001019080831161102f575b5050505050815260200160118201602080602002604051908101604052809291908260208015611088576020028201915b815481526020019060010190808311611074575b50505050508152602001603182016040518060600160405290815f82015f9054906101000a900460ff1660ff1660ff16815260200160018201548152602001600282015481525050815250509050805f0151915050919050565b6103e881565b5f600382815481106110fd576110fc6129ca565b5b905f5260205f2001549050919050565b80600a5f8481526020019081526020015f209080519060200190611132929190611975565b507fa17f6f29c43d53fdf8a8d5fc788d118621cdca690e8ee29962c3e2fbe70d5eb35f83600160405161116793929190612a8f565b60405180910390a15050565b6060600a5f8381526020019081526020015f208054806020026020016040519081016040528092919081815260200182805480156111ce57602002820191905f5260205f20905b8154815260200190600101908083116111ba575b50505050509050919050565b5f8060405180606001604052808660ff1681526020018581526020018481525090506040518060a001604052808a73ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018881526020018781526020018281525060025f8c81526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019060086112a59291906119e3565b506040820151816009019060086112bd929190611a23565b506060820151816011019060206112d5929190611a63565b506080820151816031015f820151815f015f6101000a81548160ff021916908360ff1602179055506020820151816001015560408201518160020155505090505060038a908060018154018082558091505060019003905f5260205f20015f9091909190915055600191505098975050505050505050565b5f80611358836108b2565b90505f815f6008811061136e5761136d6129ca565b5b602002015114611382576001915050611387565b5f9150505b919050565b60605f611398846105e2565b90505f600867ffffffffffffffff8111156113b6576113b5611e44565b5b6040519080825280602002602001820160405280156113e45781602001602082028036833780820191505090505b5090505f5b600881101561143657828160088110611405576114046129ca565b5b602002015182828151811061141d5761141c6129ca565b5b60200260200101818152505080806001019150506113e9565b50809250505092915050565b5f600380549050905090565b5f805f8060025f8681526020019081526020015f206040518060a00160405290815f82015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182016008806020026040519081016040528092919082600880156114fe576020028201915b8154815260200190600101908083116114ea575b5050505050815260200160098201600880602002604051908101604052809291908260088015611543576020028201915b81548152602001906001019080831161152f575b5050505050815260200160118201602080602002604051908101604052809291908260208015611588576020028201915b815481526020019060010190808311611574575b50505050508152602001603182016040518060600160405290815f82015f9054906101000a900460ff1660ff1660ff1681526020016001820154815260200160028201548152505081525050905080608001515f0151935080608001516020015192508060800151604001519150509193909250565b60605f61160a846108b2565b90505f600867ffffffffffffffff81111561162857611627611e44565b5b6040519080825280602002602001820160405280156116565781602001602082028036833780820191505090505b5090505f5b60088110156116a857828160088110611677576116766129ca565b5b602002015182828151811061168f5761168e6129ca565b5b602002602001018181525050808060010191505061165b565b50809250505092915050565b7f474faf3aa6d5f61cba0888d71cc5e409fb0ec6d76c3da540ad881c925a419c998383836040516116e793929190612b3e565b60405180910390a14360075f8581526020019081526020015f2081905550505050565b5f80611714610a61565b90505f60019050808a5f6008811061172f5761172e6129ca565b5b602002018181525050611748828c8c8c8c8c8c8c6111da565b507fa17f6f29c43d53fdf8a8d5fc788d118621cdca690e8ee29962c3e2fbe70d5eb35f838360405161177c93929190612a8f565b60405180910390a160019250505098975050505050505050565b5f60608060605f805f6117a889610f50565b96506117b489896115fe565b95506117c0898961138c565b94506117cc8989610cbf565b93506117d78961144e565b80935081945082955050505092959891949750929550565b5f6117f98a61134d565b156118e0575f6118088b6108b2565b90505f6001825f600881106118205761181f6129ca565b5b602002015161182f9190612b81565b9050808a5f60088110611845576118446129ca565b5b6020020181815250505f82600160088110611863576118626129ca565b5b60200201519050808b60016008811061187f5761187e6129ca565b5b6020020181815250506118988d8d8d8d8d8d8d8d6111da565b507f2614d1ec3482cc2505bf211c39bee96c28940521311ec70c9ebf14d3896fd1965f8e846040516118cc93929190612a8f565b60405180910390a160019350505050611922565b7f2614d1ec3482cc2505bf211c39bee96c28940521311ec70c9ebf14d3896fd1966207a24d5f8060405161191693929190612bf2565b60405180910390a15f90505b9998505050505050505050565b604051806101000160405280600890602082028036833780820191505090505090565b604051806101000160405280600890602082028036833780820191505090505090565b828054828255905f5260205f209081019282156119af579160200282015b828111156119ae578251825591602001919060010190611993565b5b5090506119bc9190611aa3565b5090565b604051806104000160405280602090602082028036833780820191505090505090565b8260088101928215611a12579160200282015b82811115611a115782518255916020019190600101906119f6565b5b509050611a1f9190611abe565b5090565b8260088101928215611a52579160200282015b82811115611a51578251825591602001919060010190611a36565b5b509050611a5f9190611ad9565b5090565b8260208101928215611a92579160200282015b82811115611a91578251825591602001919060010190611a76565b5b509050611a9f9190611ad9565b5090565b5b80821115611aba575f815f905550600101611aa4565b5090565b5b80821115611ad5575f815f905550600101611abf565b5090565b5b80821115611af0575f815f905550600101611ada565b5090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b611b1781611b05565b8114611b21575f80fd5b50565b5f81359050611b3281611b0e565b92915050565b5f60208284031215611b4d57611b4c611afd565b5b5f611b5a84828501611b24565b91505092915050565b5f60089050919050565b5f81905092915050565b5f819050919050565b5f819050919050565b611b9281611b80565b82525050565b5f611ba38383611b89565b60208301905092915050565b5f602082019050919050565b611bc481611b63565b611bce8184611b6d565b9250611bd982611b77565b805f5b83811015611c09578151611bf08782611b98565b9650611bfb83611baf565b925050600181019050611bdc565b505050505050565b5f61010082019050611c255f830184611bbb565b92915050565b5f8060408385031215611c4157611c40611afd565b5b5f611c4e85828601611b24565b9250506020611c5f85828601611b24565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611c9b81611b05565b82525050565b5f611cac8383611c92565b60208301905092915050565b5f602082019050919050565b5f611cce82611c69565b611cd88185611c73565b9350611ce383611c83565b805f5b83811015611d13578151611cfa8882611ca1565b9750611d0583611cb8565b925050600181019050611ce6565b5085935050505092915050565b5f6020820190508181035f830152611d388184611cc4565b905092915050565b5f60089050919050565b5f81905092915050565b5f819050919050565b5f819050919050565b611d6f81611d5d565b82525050565b5f611d808383611d66565b60208301905092915050565b5f602082019050919050565b611da181611d40565b611dab8184611d4a565b9250611db682611d54565b805f5b83811015611de6578151611dcd8782611d75565b9650611dd883611d8c565b925050600181019050611db9565b505050505050565b5f61010082019050611e025f830184611d98565b92915050565b611e1181611b05565b82525050565b5f602082019050611e2a5f830184611e08565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611e7a82611e34565b810181811067ffffffffffffffff82111715611e9957611e98611e44565b5b80604052505050565b5f611eab611af4565b9050611eb78282611e71565b919050565b5f67ffffffffffffffff821115611ed657611ed5611e44565b5b602082029050602081019050919050565b5f80fd5b5f611efd611ef884611ebc565b611ea2565b90508083825260208201905060208402830185811115611f2057611f1f611ee7565b5b835b81811015611f495780611f358882611b24565b845260208401935050602081019050611f22565b5050509392505050565b5f82601f830112611f6757611f66611e30565b5b8135611f77848260208601611eeb565b91505092915050565b5f60208284031215611f9557611f94611afd565b5b5f82013567ffffffffffffffff811115611fb257611fb1611b01565b5b611fbe84828501611f53565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611ff082611fc7565b9050919050565b61200081611fe6565b811461200a575f80fd5b50565b5f8135905061201b81611ff7565b92915050565b5f67ffffffffffffffff82111561203b5761203a611e44565b5b602082029050919050565b61204f81611d5d565b8114612059575f80fd5b50565b5f8135905061206a81612046565b92915050565b5f61208261207d84612021565b611ea2565b9050806020840283018581111561209c5761209b611ee7565b5b835b818110156120c557806120b1888261205c565b84526020840193505060208101905061209e565b5050509392505050565b5f82601f8301126120e3576120e2611e30565b5b60086120f0848285612070565b91505092915050565b5f67ffffffffffffffff82111561211357612112611e44565b5b602082029050919050565b61212781611b80565b8114612131575f80fd5b50565b5f813590506121428161211e565b92915050565b5f61215a612155846120f9565b611ea2565b9050806020840283018581111561217457612173611ee7565b5b835b8181101561219d57806121898882612134565b845260208401935050602081019050612176565b5050509392505050565b5f82601f8301126121bb576121ba611e30565b5b60086121c8848285612148565b91505092915050565b5f67ffffffffffffffff8211156121eb576121ea611e44565b5b602082029050919050565b5f612208612203846121d1565b611ea2565b9050806020840283018581111561222257612221611ee7565b5b835b8181101561224b57806122378882612134565b845260208401935050602081019050612224565b5050509392505050565b5f82601f83011261226957612268611e30565b5b60206122768482856121f6565b91505092915050565b5f60ff82169050919050565b6122948161227f565b811461229e575f80fd5b50565b5f813590506122af8161228b565b92915050565b5f805f805f805f610680888a0312156122d1576122d0611afd565b5b5f6122de8a828b0161200d565b97505060206122ef8a828b016120cf565b9650506101206123018a828b016121a7565b9550506102206123138a828b01612255565b9450506106206123258a828b016122a1565b9350506106406123378a828b01612134565b9250506106606123498a828b01612134565b91505092959891949750929550565b5f8115159050919050565b61236c81612358565b82525050565b5f6020820190506123855f830184612363565b92915050565b61239481611fe6565b82525050565b5f6040820190508181035f8301526123b28185611cc4565b90506123c1602083018461238b565b9392505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f602082019050919050565b5f612407826123c8565b61241181856123d2565b935061241c836123e2565b805f5b8381101561244c5781516124338882611d75565b975061243e836123f1565b92505060018101905061241f565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f602082019050919050565b5f61249882612459565b6124a28185612463565b93506124ad83612473565b805f5b838110156124dd5781516124c48882611b98565b97506124cf83612482565b9250506001810190506124b0565b5085935050505092915050565b6124f38161227f565b82525050565b61250281611b80565b82525050565b5f60e08201905061251b5f83018a61238b565b818103602083015261252d81896123fd565b90508181036040830152612541818861248e565b90508181036060830152612555818761248e565b905061256460808301866124ea565b61257160a08301856124f9565b61257e60c08301846124f9565b98975050505050505050565b5f80604083850312156125a05761259f611afd565b5b5f6125ad85828601611b24565b92505060206125be8582860161200d565b9150509250929050565b5f6020820190508181035f8301526125e0818461248e565b905092915050565b5f60209050919050565b5f81905092915050565b5f819050919050565b5f602082019050919050565b61261a816125e8565b61262481846125f2565b925061262f826125fc565b805f5b8381101561265f5781516126468782611b98565b965061265183612605565b925050600181019050612632565b505050505050565b5f6104008201905061267b5f830184612611565b92915050565b5f805f805f805f806106a0898b03121561269e5761269d611afd565b5b5f6126ab8b828c01611b24565b98505060206126bc8b828c0161200d565b97505060406126cd8b828c016120cf565b9650506101406126df8b828c016121a7565b9550506102406126f18b828c01612255565b9450506106406127038b828c016122a1565b9350506106606127158b828c01612134565b9250506106806127278b828c01612134565b9150509295985092959890939650565b5f60208201905061274a5f83018461238b565b92915050565b5f806040838503121561276657612765611afd565b5b5f61277385828601611b24565b925050602083013567ffffffffffffffff81111561279457612793611b01565b5b6127a085828601611f53565b9150509250929050565b5f6060820190506127bd5f8301866124ea565b6127ca60208301856124f9565b6127d760408301846124f9565b949350505050565b5f6020820190508181035f8301526127f781846123fd565b905092915050565b5f80fd5b5f67ffffffffffffffff82111561281d5761281c611e44565b5b61282682611e34565b9050602081019050919050565b828183375f83830152505050565b5f61285361284e84612803565b611ea2565b90508281526020810184848401111561286f5761286e6127ff565b5b61287a848285612833565b509392505050565b5f82601f83011261289657612895611e30565b5b81356128a6848260208601612841565b91505092915050565b5f805f606084860312156128c6576128c5611afd565b5b5f6128d386828701611b24565b935050602084013567ffffffffffffffff8111156128f4576128f3611b01565b5b61290086828701612882565b925050604084013567ffffffffffffffff81111561292157612920611b01565b5b61292d86828701612882565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61296e82611b05565b915061297983611b05565b925082820190508082111561299157612990612937565b5b92915050565b5f6129a182611b05565b91506129ac83611b05565b92508282039050818111156129c4576129c3612937565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f612a0182611b05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a3357612a32612937565b5b600182019050919050565b5f819050919050565b5f819050919050565b5f612a6a612a65612a6084612a3e565b612a47565b611b05565b9050919050565b612a7a81612a50565b82525050565b612a8981611d5d565b82525050565b5f606082019050612aa25f830186612a71565b612aaf6020830185611e08565b612abc6040830184612a80565b949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612afb578082015181840152602081019050612ae0565b5f8484015250505050565b5f612b1082612ac4565b612b1a8185612ace565b9350612b2a818560208601612ade565b612b3381611e34565b840191505092915050565b5f606082019050612b515f830186611e08565b8181036020830152612b638185612b06565b90508181036040830152612b778184612b06565b9050949350505050565b5f612b8b82611d5d565b9150612b9683611d5d565b92508282019050828112155f8312168382125f841215161715612bbc57612bbb612937565b5b92915050565b5f612bdc612bd7612bd284612a3e565b612a47565b611d5d565b9050919050565b612bec81612bc2565b82525050565b5f606082019050612c055f830186611e08565b612c126020830185612a71565b612c1f6040830184612be3565b94935050505056fea26469706673582212200787fe8a8e909e9686c9e9ec2f507596a179be8ebca2f40cab667377d30fa7af64736f6c63430008180033",
}

// CptABI is the input ABI used to generate the binding from.
// Deprecated: Use CptMetaData.ABI instead.
var CptABI = CptMetaData.ABI

// CptBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CptMetaData.Bin instead.
var CptBin = CptMetaData.Bin

// DeployCpt deploys a new Ethereum contract, binding an instance of Cpt to it.
func DeployCpt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Cpt, error) {
	parsed, err := CptMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CptBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Cpt{CptCaller: CptCaller{contract: contract}, CptTransactor: CptTransactor{contract: contract}, CptFilterer: CptFilterer{contract: contract}}, nil
}

// Cpt is an auto generated Go binding around an Ethereum contract.
type Cpt struct {
	CptCaller     // Read-only binding to the contract
	CptTransactor // Write-only binding to the contract
	CptFilterer   // Log filterer for contract events
}

// CptCaller is an auto generated read-only Go binding around an Ethereum contract.
type CptCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CptTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CptTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CptFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CptFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CptSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CptSession struct {
	Contract     *Cpt              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CptCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CptCallerSession struct {
	Contract *CptCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CptTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CptTransactorSession struct {
	Contract     *CptTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CptRaw is an auto generated low-level Go binding around an Ethereum contract.
type CptRaw struct {
	Contract *Cpt // Generic contract binding to access the raw methods on
}

// CptCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CptCallerRaw struct {
	Contract *CptCaller // Generic read-only contract binding to access the raw methods on
}

// CptTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CptTransactorRaw struct {
	Contract *CptTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCpt creates a new instance of Cpt, bound to a specific deployed contract.
func NewCpt(address common.Address, backend bind.ContractBackend) (*Cpt, error) {
	contract, err := bindCpt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Cpt{CptCaller: CptCaller{contract: contract}, CptTransactor: CptTransactor{contract: contract}, CptFilterer: CptFilterer{contract: contract}}, nil
}

// NewCptCaller creates a new read-only instance of Cpt, bound to a specific deployed contract.
func NewCptCaller(address common.Address, caller bind.ContractCaller) (*CptCaller, error) {
	contract, err := bindCpt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CptCaller{contract: contract}, nil
}

// NewCptTransactor creates a new write-only instance of Cpt, bound to a specific deployed contract.
func NewCptTransactor(address common.Address, transactor bind.ContractTransactor) (*CptTransactor, error) {
	contract, err := bindCpt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CptTransactor{contract: contract}, nil
}

// NewCptFilterer creates a new log filterer instance of Cpt, bound to a specific deployed contract.
func NewCptFilterer(address common.Address, filterer bind.ContractFilterer) (*CptFilterer, error) {
	contract, err := bindCpt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CptFilterer{contract: contract}, nil
}

// bindCpt binds a generic wrapper to an already deployed contract.
func bindCpt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CptMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Cpt *CptRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Cpt.Contract.CptCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Cpt *CptRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cpt.Contract.CptTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Cpt *CptRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Cpt.Contract.CptTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Cpt *CptCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Cpt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Cpt *CptTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cpt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Cpt *CptTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Cpt.Contract.contract.Transact(opts, method, params...)
}

// AUTHORITYISSUERSTARTID is a free data retrieval call binding the contract method 0x6fce6bb3.
//
// Solidity: function AUTHORITY_ISSUER_START_ID() view returns(uint256)
func (_Cpt *CptCaller) AUTHORITYISSUERSTARTID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "AUTHORITY_ISSUER_START_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AUTHORITYISSUERSTARTID is a free data retrieval call binding the contract method 0x6fce6bb3.
//
// Solidity: function AUTHORITY_ISSUER_START_ID() view returns(uint256)
func (_Cpt *CptSession) AUTHORITYISSUERSTARTID() (*big.Int, error) {
	return _Cpt.Contract.AUTHORITYISSUERSTARTID(&_Cpt.CallOpts)
}

// AUTHORITYISSUERSTARTID is a free data retrieval call binding the contract method 0x6fce6bb3.
//
// Solidity: function AUTHORITY_ISSUER_START_ID() view returns(uint256)
func (_Cpt *CptCallerSession) AUTHORITYISSUERSTARTID() (*big.Int, error) {
	return _Cpt.Contract.AUTHORITYISSUERSTARTID(&_Cpt.CallOpts)
}

// NONEAUTHORITYISSUERSTARTID is a free data retrieval call binding the contract method 0x2c0abe1d.
//
// Solidity: function NONE_AUTHORITY_ISSUER_START_ID() view returns(uint256)
func (_Cpt *CptCaller) NONEAUTHORITYISSUERSTARTID(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "NONE_AUTHORITY_ISSUER_START_ID")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NONEAUTHORITYISSUERSTARTID is a free data retrieval call binding the contract method 0x2c0abe1d.
//
// Solidity: function NONE_AUTHORITY_ISSUER_START_ID() view returns(uint256)
func (_Cpt *CptSession) NONEAUTHORITYISSUERSTARTID() (*big.Int, error) {
	return _Cpt.Contract.NONEAUTHORITYISSUERSTARTID(&_Cpt.CallOpts)
}

// NONEAUTHORITYISSUERSTARTID is a free data retrieval call binding the contract method 0x2c0abe1d.
//
// Solidity: function NONE_AUTHORITY_ISSUER_START_ID() view returns(uint256)
func (_Cpt *CptCallerSession) NONEAUTHORITYISSUERSTARTID() (*big.Int, error) {
	return _Cpt.Contract.NONEAUTHORITYISSUERSTARTID(&_Cpt.CallOpts)
}

// GetClaimPoliciesFromCptMap is a free data retrieval call binding the contract method 0xcd3a3465.
//
// Solidity: function getClaimPoliciesFromCptMap(uint256 cptId) view returns(uint256[])
func (_Cpt *CptCaller) GetClaimPoliciesFromCptMap(opts *bind.CallOpts, cptId *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getClaimPoliciesFromCptMap", cptId)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetClaimPoliciesFromCptMap is a free data retrieval call binding the contract method 0xcd3a3465.
//
// Solidity: function getClaimPoliciesFromCptMap(uint256 cptId) view returns(uint256[])
func (_Cpt *CptSession) GetClaimPoliciesFromCptMap(cptId *big.Int) ([]*big.Int, error) {
	return _Cpt.Contract.GetClaimPoliciesFromCptMap(&_Cpt.CallOpts, cptId)
}

// GetClaimPoliciesFromCptMap is a free data retrieval call binding the contract method 0xcd3a3465.
//
// Solidity: function getClaimPoliciesFromCptMap(uint256 cptId) view returns(uint256[])
func (_Cpt *CptCallerSession) GetClaimPoliciesFromCptMap(cptId *big.Int) ([]*big.Int, error) {
	return _Cpt.Contract.GetClaimPoliciesFromCptMap(&_Cpt.CallOpts, cptId)
}

// GetClaimPoliciesFromPresentationMap is a free data retrieval call binding the contract method 0x497588e9.
//
// Solidity: function getClaimPoliciesFromPresentationMap(uint256 presentationId) view returns(uint256[], address)
func (_Cpt *CptCaller) GetClaimPoliciesFromPresentationMap(opts *bind.CallOpts, presentationId *big.Int) ([]*big.Int, common.Address, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getClaimPoliciesFromPresentationMap", presentationId)

	if err != nil {
		return *new([]*big.Int), *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return out0, out1, err

}

// GetClaimPoliciesFromPresentationMap is a free data retrieval call binding the contract method 0x497588e9.
//
// Solidity: function getClaimPoliciesFromPresentationMap(uint256 presentationId) view returns(uint256[], address)
func (_Cpt *CptSession) GetClaimPoliciesFromPresentationMap(presentationId *big.Int) ([]*big.Int, common.Address, error) {
	return _Cpt.Contract.GetClaimPoliciesFromPresentationMap(&_Cpt.CallOpts, presentationId)
}

// GetClaimPoliciesFromPresentationMap is a free data retrieval call binding the contract method 0x497588e9.
//
// Solidity: function getClaimPoliciesFromPresentationMap(uint256 presentationId) view returns(uint256[], address)
func (_Cpt *CptCallerSession) GetClaimPoliciesFromPresentationMap(presentationId *big.Int) ([]*big.Int, common.Address, error) {
	return _Cpt.Contract.GetClaimPoliciesFromPresentationMap(&_Cpt.CallOpts, presentationId)
}

// GetCptBytes32Array is a free data retrieval call binding the contract method 0x0027baa4.
//
// Solidity: function getCptBytes32Array(uint256 cptId) view returns(bytes32[8] bytes32Array)
func (_Cpt *CptCaller) GetCptBytes32Array(opts *bind.CallOpts, cptId *big.Int) ([8][32]byte, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptBytes32Array", cptId)

	if err != nil {
		return *new([8][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([8][32]byte)).(*[8][32]byte)

	return out0, err

}

// GetCptBytes32Array is a free data retrieval call binding the contract method 0x0027baa4.
//
// Solidity: function getCptBytes32Array(uint256 cptId) view returns(bytes32[8] bytes32Array)
func (_Cpt *CptSession) GetCptBytes32Array(cptId *big.Int) ([8][32]byte, error) {
	return _Cpt.Contract.GetCptBytes32Array(&_Cpt.CallOpts, cptId)
}

// GetCptBytes32Array is a free data retrieval call binding the contract method 0x0027baa4.
//
// Solidity: function getCptBytes32Array(uint256 cptId) view returns(bytes32[8] bytes32Array)
func (_Cpt *CptCallerSession) GetCptBytes32Array(cptId *big.Int) ([8][32]byte, error) {
	return _Cpt.Contract.GetCptBytes32Array(&_Cpt.CallOpts, cptId)
}

// GetCptDynamicBytes32Array is a free data retrieval call binding the contract method 0xd6edb44e.
//
// Solidity: function getCptDynamicBytes32Array(uint256 cptId, address dataStorageAddress) view returns(bytes32[])
func (_Cpt *CptCaller) GetCptDynamicBytes32Array(opts *bind.CallOpts, cptId *big.Int, dataStorageAddress common.Address) ([][32]byte, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptDynamicBytes32Array", cptId, dataStorageAddress)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetCptDynamicBytes32Array is a free data retrieval call binding the contract method 0xd6edb44e.
//
// Solidity: function getCptDynamicBytes32Array(uint256 cptId, address dataStorageAddress) view returns(bytes32[])
func (_Cpt *CptSession) GetCptDynamicBytes32Array(cptId *big.Int, dataStorageAddress common.Address) ([][32]byte, error) {
	return _Cpt.Contract.GetCptDynamicBytes32Array(&_Cpt.CallOpts, cptId, dataStorageAddress)
}

// GetCptDynamicBytes32Array is a free data retrieval call binding the contract method 0xd6edb44e.
//
// Solidity: function getCptDynamicBytes32Array(uint256 cptId, address dataStorageAddress) view returns(bytes32[])
func (_Cpt *CptCallerSession) GetCptDynamicBytes32Array(cptId *big.Int, dataStorageAddress common.Address) ([][32]byte, error) {
	return _Cpt.Contract.GetCptDynamicBytes32Array(&_Cpt.CallOpts, cptId, dataStorageAddress)
}

// GetCptDynamicIntArray is a free data retrieval call binding the contract method 0xe5a34e6e.
//
// Solidity: function getCptDynamicIntArray(uint256 cptId, address dataStorageAddress) view returns(int256[])
func (_Cpt *CptCaller) GetCptDynamicIntArray(opts *bind.CallOpts, cptId *big.Int, dataStorageAddress common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptDynamicIntArray", cptId, dataStorageAddress)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetCptDynamicIntArray is a free data retrieval call binding the contract method 0xe5a34e6e.
//
// Solidity: function getCptDynamicIntArray(uint256 cptId, address dataStorageAddress) view returns(int256[])
func (_Cpt *CptSession) GetCptDynamicIntArray(cptId *big.Int, dataStorageAddress common.Address) ([]*big.Int, error) {
	return _Cpt.Contract.GetCptDynamicIntArray(&_Cpt.CallOpts, cptId, dataStorageAddress)
}

// GetCptDynamicIntArray is a free data retrieval call binding the contract method 0xe5a34e6e.
//
// Solidity: function getCptDynamicIntArray(uint256 cptId, address dataStorageAddress) view returns(int256[])
func (_Cpt *CptCallerSession) GetCptDynamicIntArray(cptId *big.Int, dataStorageAddress common.Address) ([]*big.Int, error) {
	return _Cpt.Contract.GetCptDynamicIntArray(&_Cpt.CallOpts, cptId, dataStorageAddress)
}

// GetCptDynamicJsonSchemaArray is a free data retrieval call binding the contract method 0x62238a79.
//
// Solidity: function getCptDynamicJsonSchemaArray(uint256 cptId, address dataStorageAddress) view returns(bytes32[])
func (_Cpt *CptCaller) GetCptDynamicJsonSchemaArray(opts *bind.CallOpts, cptId *big.Int, dataStorageAddress common.Address) ([][32]byte, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptDynamicJsonSchemaArray", cptId, dataStorageAddress)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetCptDynamicJsonSchemaArray is a free data retrieval call binding the contract method 0x62238a79.
//
// Solidity: function getCptDynamicJsonSchemaArray(uint256 cptId, address dataStorageAddress) view returns(bytes32[])
func (_Cpt *CptSession) GetCptDynamicJsonSchemaArray(cptId *big.Int, dataStorageAddress common.Address) ([][32]byte, error) {
	return _Cpt.Contract.GetCptDynamicJsonSchemaArray(&_Cpt.CallOpts, cptId, dataStorageAddress)
}

// GetCptDynamicJsonSchemaArray is a free data retrieval call binding the contract method 0x62238a79.
//
// Solidity: function getCptDynamicJsonSchemaArray(uint256 cptId, address dataStorageAddress) view returns(bytes32[])
func (_Cpt *CptCallerSession) GetCptDynamicJsonSchemaArray(cptId *big.Int, dataStorageAddress common.Address) ([][32]byte, error) {
	return _Cpt.Contract.GetCptDynamicJsonSchemaArray(&_Cpt.CallOpts, cptId, dataStorageAddress)
}

// GetCptIdFromIndex is a free data retrieval call binding the contract method 0xa07bd9b5.
//
// Solidity: function getCptIdFromIndex(uint256 index) view returns(uint256)
func (_Cpt *CptCaller) GetCptIdFromIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptIdFromIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCptIdFromIndex is a free data retrieval call binding the contract method 0xa07bd9b5.
//
// Solidity: function getCptIdFromIndex(uint256 index) view returns(uint256)
func (_Cpt *CptSession) GetCptIdFromIndex(index *big.Int) (*big.Int, error) {
	return _Cpt.Contract.GetCptIdFromIndex(&_Cpt.CallOpts, index)
}

// GetCptIdFromIndex is a free data retrieval call binding the contract method 0xa07bd9b5.
//
// Solidity: function getCptIdFromIndex(uint256 index) view returns(uint256)
func (_Cpt *CptCallerSession) GetCptIdFromIndex(index *big.Int) (*big.Int, error) {
	return _Cpt.Contract.GetCptIdFromIndex(&_Cpt.CallOpts, index)
}

// GetCptIdList is a free data retrieval call binding the contract method 0x1e040fc7.
//
// Solidity: function getCptIdList(uint256 startPos, uint256 num) view returns(uint256[])
func (_Cpt *CptCaller) GetCptIdList(opts *bind.CallOpts, startPos *big.Int, num *big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptIdList", startPos, num)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetCptIdList is a free data retrieval call binding the contract method 0x1e040fc7.
//
// Solidity: function getCptIdList(uint256 startPos, uint256 num) view returns(uint256[])
func (_Cpt *CptSession) GetCptIdList(startPos *big.Int, num *big.Int) ([]*big.Int, error) {
	return _Cpt.Contract.GetCptIdList(&_Cpt.CallOpts, startPos, num)
}

// GetCptIdList is a free data retrieval call binding the contract method 0x1e040fc7.
//
// Solidity: function getCptIdList(uint256 startPos, uint256 num) view returns(uint256[])
func (_Cpt *CptCallerSession) GetCptIdList(startPos *big.Int, num *big.Int) ([]*big.Int, error) {
	return _Cpt.Contract.GetCptIdList(&_Cpt.CallOpts, startPos, num)
}

// GetCptIntArray is a free data retrieval call binding the contract method 0x23b746f1.
//
// Solidity: function getCptIntArray(uint256 cptId) view returns(int256[8] intArray)
func (_Cpt *CptCaller) GetCptIntArray(opts *bind.CallOpts, cptId *big.Int) ([8]*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptIntArray", cptId)

	if err != nil {
		return *new([8]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([8]*big.Int)).(*[8]*big.Int)

	return out0, err

}

// GetCptIntArray is a free data retrieval call binding the contract method 0x23b746f1.
//
// Solidity: function getCptIntArray(uint256 cptId) view returns(int256[8] intArray)
func (_Cpt *CptSession) GetCptIntArray(cptId *big.Int) ([8]*big.Int, error) {
	return _Cpt.Contract.GetCptIntArray(&_Cpt.CallOpts, cptId)
}

// GetCptIntArray is a free data retrieval call binding the contract method 0x23b746f1.
//
// Solidity: function getCptIntArray(uint256 cptId) view returns(int256[8] intArray)
func (_Cpt *CptCallerSession) GetCptIntArray(cptId *big.Int) ([8]*big.Int, error) {
	return _Cpt.Contract.GetCptIntArray(&_Cpt.CallOpts, cptId)
}

// GetCptJsonSchemaArray is a free data retrieval call binding the contract method 0x628e526f.
//
// Solidity: function getCptJsonSchemaArray(uint256 cptId) view returns(bytes32[32] jsonSchemaArray)
func (_Cpt *CptCaller) GetCptJsonSchemaArray(opts *bind.CallOpts, cptId *big.Int) ([32][32]byte, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptJsonSchemaArray", cptId)

	if err != nil {
		return *new([32][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32][32]byte)).(*[32][32]byte)

	return out0, err

}

// GetCptJsonSchemaArray is a free data retrieval call binding the contract method 0x628e526f.
//
// Solidity: function getCptJsonSchemaArray(uint256 cptId) view returns(bytes32[32] jsonSchemaArray)
func (_Cpt *CptSession) GetCptJsonSchemaArray(cptId *big.Int) ([32][32]byte, error) {
	return _Cpt.Contract.GetCptJsonSchemaArray(&_Cpt.CallOpts, cptId)
}

// GetCptJsonSchemaArray is a free data retrieval call binding the contract method 0x628e526f.
//
// Solidity: function getCptJsonSchemaArray(uint256 cptId) view returns(bytes32[32] jsonSchemaArray)
func (_Cpt *CptCallerSession) GetCptJsonSchemaArray(cptId *big.Int) ([32][32]byte, error) {
	return _Cpt.Contract.GetCptJsonSchemaArray(&_Cpt.CallOpts, cptId)
}

// GetCptPublisher is a free data retrieval call binding the contract method 0x6da223b7.
//
// Solidity: function getCptPublisher(uint256 cptId) view returns(address publisher)
func (_Cpt *CptCaller) GetCptPublisher(opts *bind.CallOpts, cptId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptPublisher", cptId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetCptPublisher is a free data retrieval call binding the contract method 0x6da223b7.
//
// Solidity: function getCptPublisher(uint256 cptId) view returns(address publisher)
func (_Cpt *CptSession) GetCptPublisher(cptId *big.Int) (common.Address, error) {
	return _Cpt.Contract.GetCptPublisher(&_Cpt.CallOpts, cptId)
}

// GetCptPublisher is a free data retrieval call binding the contract method 0x6da223b7.
//
// Solidity: function getCptPublisher(uint256 cptId) view returns(address publisher)
func (_Cpt *CptCallerSession) GetCptPublisher(cptId *big.Int) (common.Address, error) {
	return _Cpt.Contract.GetCptPublisher(&_Cpt.CallOpts, cptId)
}

// GetCptSignature is a free data retrieval call binding the contract method 0xe5741ff3.
//
// Solidity: function getCptSignature(uint256 cptId) view returns(uint8 v, bytes32 r, bytes32 s)
func (_Cpt *CptCaller) GetCptSignature(opts *bind.CallOpts, cptId *big.Int) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCptSignature", cptId)

	outstruct := new(struct {
		V uint8
		R [32]byte
		S [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.V = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// GetCptSignature is a free data retrieval call binding the contract method 0xe5741ff3.
//
// Solidity: function getCptSignature(uint256 cptId) view returns(uint8 v, bytes32 r, bytes32 s)
func (_Cpt *CptSession) GetCptSignature(cptId *big.Int) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Cpt.Contract.GetCptSignature(&_Cpt.CallOpts, cptId)
}

// GetCptSignature is a free data retrieval call binding the contract method 0xe5741ff3.
//
// Solidity: function getCptSignature(uint256 cptId) view returns(uint8 v, bytes32 r, bytes32 s)
func (_Cpt *CptCallerSession) GetCptSignature(cptId *big.Int) (struct {
	V uint8
	R [32]byte
	S [32]byte
}, error) {
	return _Cpt.Contract.GetCptSignature(&_Cpt.CallOpts, cptId)
}

// GetCredentialTemplateBlock is a free data retrieval call binding the contract method 0x3d6c4823.
//
// Solidity: function getCredentialTemplateBlock(uint256 cptId) view returns(uint256)
func (_Cpt *CptCaller) GetCredentialTemplateBlock(opts *bind.CallOpts, cptId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getCredentialTemplateBlock", cptId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCredentialTemplateBlock is a free data retrieval call binding the contract method 0x3d6c4823.
//
// Solidity: function getCredentialTemplateBlock(uint256 cptId) view returns(uint256)
func (_Cpt *CptSession) GetCredentialTemplateBlock(cptId *big.Int) (*big.Int, error) {
	return _Cpt.Contract.GetCredentialTemplateBlock(&_Cpt.CallOpts, cptId)
}

// GetCredentialTemplateBlock is a free data retrieval call binding the contract method 0x3d6c4823.
//
// Solidity: function getCredentialTemplateBlock(uint256 cptId) view returns(uint256)
func (_Cpt *CptCallerSession) GetCredentialTemplateBlock(cptId *big.Int) (*big.Int, error) {
	return _Cpt.Contract.GetCredentialTemplateBlock(&_Cpt.CallOpts, cptId)
}

// GetDatasetLength is a free data retrieval call binding the contract method 0xe083a3ad.
//
// Solidity: function getDatasetLength() view returns(uint256)
func (_Cpt *CptCaller) GetDatasetLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getDatasetLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDatasetLength is a free data retrieval call binding the contract method 0xe083a3ad.
//
// Solidity: function getDatasetLength() view returns(uint256)
func (_Cpt *CptSession) GetDatasetLength() (*big.Int, error) {
	return _Cpt.Contract.GetDatasetLength(&_Cpt.CallOpts)
}

// GetDatasetLength is a free data retrieval call binding the contract method 0xe083a3ad.
//
// Solidity: function getDatasetLength() view returns(uint256)
func (_Cpt *CptCallerSession) GetDatasetLength() (*big.Int, error) {
	return _Cpt.Contract.GetDatasetLength(&_Cpt.CallOpts)
}

// GetTotalCptId is a free data retrieval call binding the contract method 0x2984fcc8.
//
// Solidity: function getTotalCptId() view returns(uint256)
func (_Cpt *CptCaller) GetTotalCptId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "getTotalCptId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalCptId is a free data retrieval call binding the contract method 0x2984fcc8.
//
// Solidity: function getTotalCptId() view returns(uint256)
func (_Cpt *CptSession) GetTotalCptId() (*big.Int, error) {
	return _Cpt.Contract.GetTotalCptId(&_Cpt.CallOpts)
}

// GetTotalCptId is a free data retrieval call binding the contract method 0x2984fcc8.
//
// Solidity: function getTotalCptId() view returns(uint256)
func (_Cpt *CptCallerSession) GetTotalCptId() (*big.Int, error) {
	return _Cpt.Contract.GetTotalCptId(&_Cpt.CallOpts)
}

// IsCptExist is a free data retrieval call binding the contract method 0xd4eb8a42.
//
// Solidity: function isCptExist(uint256 cptId) view returns(bool)
func (_Cpt *CptCaller) IsCptExist(opts *bind.CallOpts, cptId *big.Int) (bool, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "isCptExist", cptId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCptExist is a free data retrieval call binding the contract method 0xd4eb8a42.
//
// Solidity: function isCptExist(uint256 cptId) view returns(bool)
func (_Cpt *CptSession) IsCptExist(cptId *big.Int) (bool, error) {
	return _Cpt.Contract.IsCptExist(&_Cpt.CallOpts, cptId)
}

// IsCptExist is a free data retrieval call binding the contract method 0xd4eb8a42.
//
// Solidity: function isCptExist(uint256 cptId) view returns(bool)
func (_Cpt *CptCallerSession) IsCptExist(cptId *big.Int) (bool, error) {
	return _Cpt.Contract.IsCptExist(&_Cpt.CallOpts, cptId)
}

// QueryCpt is a free data retrieval call binding the contract method 0x5ca35abf.
//
// Solidity: function queryCpt(uint256 cptId) view returns(address publisher, int256[] intArray, bytes32[] bytes32Array, bytes32[] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s)
func (_Cpt *CptCaller) QueryCpt(opts *bind.CallOpts, cptId *big.Int) (struct {
	Publisher       common.Address
	IntArray        []*big.Int
	Bytes32Array    [][32]byte
	JsonSchemaArray [][32]byte
	V               uint8
	R               [32]byte
	S               [32]byte
}, error) {
	var out []interface{}
	err := _Cpt.contract.Call(opts, &out, "queryCpt", cptId)

	outstruct := new(struct {
		Publisher       common.Address
		IntArray        []*big.Int
		Bytes32Array    [][32]byte
		JsonSchemaArray [][32]byte
		V               uint8
		R               [32]byte
		S               [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Publisher = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.IntArray = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.Bytes32Array = *abi.ConvertType(out[2], new([][32]byte)).(*[][32]byte)
	outstruct.JsonSchemaArray = *abi.ConvertType(out[3], new([][32]byte)).(*[][32]byte)
	outstruct.V = *abi.ConvertType(out[4], new(uint8)).(*uint8)
	outstruct.R = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.S = *abi.ConvertType(out[6], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// QueryCpt is a free data retrieval call binding the contract method 0x5ca35abf.
//
// Solidity: function queryCpt(uint256 cptId) view returns(address publisher, int256[] intArray, bytes32[] bytes32Array, bytes32[] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s)
func (_Cpt *CptSession) QueryCpt(cptId *big.Int) (struct {
	Publisher       common.Address
	IntArray        []*big.Int
	Bytes32Array    [][32]byte
	JsonSchemaArray [][32]byte
	V               uint8
	R               [32]byte
	S               [32]byte
}, error) {
	return _Cpt.Contract.QueryCpt(&_Cpt.CallOpts, cptId)
}

// QueryCpt is a free data retrieval call binding the contract method 0x5ca35abf.
//
// Solidity: function queryCpt(uint256 cptId) view returns(address publisher, int256[] intArray, bytes32[] bytes32Array, bytes32[] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s)
func (_Cpt *CptCallerSession) QueryCpt(cptId *big.Int) (struct {
	Publisher       common.Address
	IntArray        []*big.Int
	Bytes32Array    [][32]byte
	JsonSchemaArray [][32]byte
	V               uint8
	R               [32]byte
	S               [32]byte
}, error) {
	return _Cpt.Contract.QueryCpt(&_Cpt.CallOpts, cptId)
}

// GetCptId is a paid mutator transaction binding the contract method 0x3d29ba2b.
//
// Solidity: function getCptId() returns(uint256 cptId)
func (_Cpt *CptTransactor) GetCptId(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "getCptId")
}

// GetCptId is a paid mutator transaction binding the contract method 0x3d29ba2b.
//
// Solidity: function getCptId() returns(uint256 cptId)
func (_Cpt *CptSession) GetCptId() (*types.Transaction, error) {
	return _Cpt.Contract.GetCptId(&_Cpt.TransactOpts)
}

// GetCptId is a paid mutator transaction binding the contract method 0x3d29ba2b.
//
// Solidity: function getCptId() returns(uint256 cptId)
func (_Cpt *CptTransactorSession) GetCptId() (*types.Transaction, error) {
	return _Cpt.Contract.GetCptId(&_Cpt.TransactOpts)
}

// PutClaimPoliciesIntoCptMap is a paid mutator transaction binding the contract method 0xb3cc5e75.
//
// Solidity: function putClaimPoliciesIntoCptMap(uint256 cptId, uint256[] uintArray) returns()
func (_Cpt *CptTransactor) PutClaimPoliciesIntoCptMap(opts *bind.TransactOpts, cptId *big.Int, uintArray []*big.Int) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "putClaimPoliciesIntoCptMap", cptId, uintArray)
}

// PutClaimPoliciesIntoCptMap is a paid mutator transaction binding the contract method 0xb3cc5e75.
//
// Solidity: function putClaimPoliciesIntoCptMap(uint256 cptId, uint256[] uintArray) returns()
func (_Cpt *CptSession) PutClaimPoliciesIntoCptMap(cptId *big.Int, uintArray []*big.Int) (*types.Transaction, error) {
	return _Cpt.Contract.PutClaimPoliciesIntoCptMap(&_Cpt.TransactOpts, cptId, uintArray)
}

// PutClaimPoliciesIntoCptMap is a paid mutator transaction binding the contract method 0xb3cc5e75.
//
// Solidity: function putClaimPoliciesIntoCptMap(uint256 cptId, uint256[] uintArray) returns()
func (_Cpt *CptTransactorSession) PutClaimPoliciesIntoCptMap(cptId *big.Int, uintArray []*big.Int) (*types.Transaction, error) {
	return _Cpt.Contract.PutClaimPoliciesIntoCptMap(&_Cpt.TransactOpts, cptId, uintArray)
}

// PutClaimPoliciesIntoPresentationMap is a paid mutator transaction binding the contract method 0x42e8f8e9.
//
// Solidity: function putClaimPoliciesIntoPresentationMap(uint256[] uintArray) returns()
func (_Cpt *CptTransactor) PutClaimPoliciesIntoPresentationMap(opts *bind.TransactOpts, uintArray []*big.Int) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "putClaimPoliciesIntoPresentationMap", uintArray)
}

// PutClaimPoliciesIntoPresentationMap is a paid mutator transaction binding the contract method 0x42e8f8e9.
//
// Solidity: function putClaimPoliciesIntoPresentationMap(uint256[] uintArray) returns()
func (_Cpt *CptSession) PutClaimPoliciesIntoPresentationMap(uintArray []*big.Int) (*types.Transaction, error) {
	return _Cpt.Contract.PutClaimPoliciesIntoPresentationMap(&_Cpt.TransactOpts, uintArray)
}

// PutClaimPoliciesIntoPresentationMap is a paid mutator transaction binding the contract method 0x42e8f8e9.
//
// Solidity: function putClaimPoliciesIntoPresentationMap(uint256[] uintArray) returns()
func (_Cpt *CptTransactorSession) PutClaimPoliciesIntoPresentationMap(uintArray []*big.Int) (*types.Transaction, error) {
	return _Cpt.Contract.PutClaimPoliciesIntoPresentationMap(&_Cpt.TransactOpts, uintArray)
}

// PutCpt is a paid mutator transaction binding the contract method 0xd2a3b53d.
//
// Solidity: function putCpt(uint256 cptId, address cptPublisher, int256[8] cptIntArray, bytes32[8] cptBytes32Array, bytes32[32] cptJsonSchemaArray, uint8 cptV, bytes32 cptR, bytes32 cptS) returns(bool)
func (_Cpt *CptTransactor) PutCpt(opts *bind.TransactOpts, cptId *big.Int, cptPublisher common.Address, cptIntArray [8]*big.Int, cptBytes32Array [8][32]byte, cptJsonSchemaArray [32][32]byte, cptV uint8, cptR [32]byte, cptS [32]byte) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "putCpt", cptId, cptPublisher, cptIntArray, cptBytes32Array, cptJsonSchemaArray, cptV, cptR, cptS)
}

// PutCpt is a paid mutator transaction binding the contract method 0xd2a3b53d.
//
// Solidity: function putCpt(uint256 cptId, address cptPublisher, int256[8] cptIntArray, bytes32[8] cptBytes32Array, bytes32[32] cptJsonSchemaArray, uint8 cptV, bytes32 cptR, bytes32 cptS) returns(bool)
func (_Cpt *CptSession) PutCpt(cptId *big.Int, cptPublisher common.Address, cptIntArray [8]*big.Int, cptBytes32Array [8][32]byte, cptJsonSchemaArray [32][32]byte, cptV uint8, cptR [32]byte, cptS [32]byte) (*types.Transaction, error) {
	return _Cpt.Contract.PutCpt(&_Cpt.TransactOpts, cptId, cptPublisher, cptIntArray, cptBytes32Array, cptJsonSchemaArray, cptV, cptR, cptS)
}

// PutCpt is a paid mutator transaction binding the contract method 0xd2a3b53d.
//
// Solidity: function putCpt(uint256 cptId, address cptPublisher, int256[8] cptIntArray, bytes32[8] cptBytes32Array, bytes32[32] cptJsonSchemaArray, uint8 cptV, bytes32 cptR, bytes32 cptS) returns(bool)
func (_Cpt *CptTransactorSession) PutCpt(cptId *big.Int, cptPublisher common.Address, cptIntArray [8]*big.Int, cptBytes32Array [8][32]byte, cptJsonSchemaArray [32][32]byte, cptV uint8, cptR [32]byte, cptS [32]byte) (*types.Transaction, error) {
	return _Cpt.Contract.PutCpt(&_Cpt.TransactOpts, cptId, cptPublisher, cptIntArray, cptBytes32Array, cptJsonSchemaArray, cptV, cptR, cptS)
}

// PutCredentialTemplate is a paid mutator transaction binding the contract method 0xf00245ab.
//
// Solidity: function putCredentialTemplate(uint256 cptId, bytes credentialPublicKey, bytes credentialProof) returns()
func (_Cpt *CptTransactor) PutCredentialTemplate(opts *bind.TransactOpts, cptId *big.Int, credentialPublicKey []byte, credentialProof []byte) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "putCredentialTemplate", cptId, credentialPublicKey, credentialProof)
}

// PutCredentialTemplate is a paid mutator transaction binding the contract method 0xf00245ab.
//
// Solidity: function putCredentialTemplate(uint256 cptId, bytes credentialPublicKey, bytes credentialProof) returns()
func (_Cpt *CptSession) PutCredentialTemplate(cptId *big.Int, credentialPublicKey []byte, credentialProof []byte) (*types.Transaction, error) {
	return _Cpt.Contract.PutCredentialTemplate(&_Cpt.TransactOpts, cptId, credentialPublicKey, credentialProof)
}

// PutCredentialTemplate is a paid mutator transaction binding the contract method 0xf00245ab.
//
// Solidity: function putCredentialTemplate(uint256 cptId, bytes credentialPublicKey, bytes credentialProof) returns()
func (_Cpt *CptTransactorSession) PutCredentialTemplate(cptId *big.Int, credentialPublicKey []byte, credentialProof []byte) (*types.Transaction, error) {
	return _Cpt.Contract.PutCredentialTemplate(&_Cpt.TransactOpts, cptId, credentialPublicKey, credentialProof)
}

// RegisterCpt is a paid mutator transaction binding the contract method 0x47b42f88.
//
// Solidity: function registerCpt(address publisher, int256[8] intArray, bytes32[8] bytes32Array, bytes32[32] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Cpt *CptTransactor) RegisterCpt(opts *bind.TransactOpts, publisher common.Address, intArray [8]*big.Int, bytes32Array [8][32]byte, jsonSchemaArray [32][32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "registerCpt", publisher, intArray, bytes32Array, jsonSchemaArray, v, r, s)
}

// RegisterCpt is a paid mutator transaction binding the contract method 0x47b42f88.
//
// Solidity: function registerCpt(address publisher, int256[8] intArray, bytes32[8] bytes32Array, bytes32[32] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Cpt *CptSession) RegisterCpt(publisher common.Address, intArray [8]*big.Int, bytes32Array [8][32]byte, jsonSchemaArray [32][32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Cpt.Contract.RegisterCpt(&_Cpt.TransactOpts, publisher, intArray, bytes32Array, jsonSchemaArray, v, r, s)
}

// RegisterCpt is a paid mutator transaction binding the contract method 0x47b42f88.
//
// Solidity: function registerCpt(address publisher, int256[8] intArray, bytes32[8] bytes32Array, bytes32[32] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Cpt *CptTransactorSession) RegisterCpt(publisher common.Address, intArray [8]*big.Int, bytes32Array [8][32]byte, jsonSchemaArray [32][32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Cpt.Contract.RegisterCpt(&_Cpt.TransactOpts, publisher, intArray, bytes32Array, jsonSchemaArray, v, r, s)
}

// UpdateCpt is a paid mutator transaction binding the contract method 0x66d6a90b.
//
// Solidity: function updateCpt(uint256 cptId, address publisher, int256[8] intArray, bytes32[8] bytes32Array, bytes32[32] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Cpt *CptTransactor) UpdateCpt(opts *bind.TransactOpts, cptId *big.Int, publisher common.Address, intArray [8]*big.Int, bytes32Array [8][32]byte, jsonSchemaArray [32][32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Cpt.contract.Transact(opts, "updateCpt", cptId, publisher, intArray, bytes32Array, jsonSchemaArray, v, r, s)
}

// UpdateCpt is a paid mutator transaction binding the contract method 0x66d6a90b.
//
// Solidity: function updateCpt(uint256 cptId, address publisher, int256[8] intArray, bytes32[8] bytes32Array, bytes32[32] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Cpt *CptSession) UpdateCpt(cptId *big.Int, publisher common.Address, intArray [8]*big.Int, bytes32Array [8][32]byte, jsonSchemaArray [32][32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Cpt.Contract.UpdateCpt(&_Cpt.TransactOpts, cptId, publisher, intArray, bytes32Array, jsonSchemaArray, v, r, s)
}

// UpdateCpt is a paid mutator transaction binding the contract method 0x66d6a90b.
//
// Solidity: function updateCpt(uint256 cptId, address publisher, int256[8] intArray, bytes32[8] bytes32Array, bytes32[32] jsonSchemaArray, uint8 v, bytes32 r, bytes32 s) returns(bool)
func (_Cpt *CptTransactorSession) UpdateCpt(cptId *big.Int, publisher common.Address, intArray [8]*big.Int, bytes32Array [8][32]byte, jsonSchemaArray [32][32]byte, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _Cpt.Contract.UpdateCpt(&_Cpt.TransactOpts, cptId, publisher, intArray, bytes32Array, jsonSchemaArray, v, r, s)
}

// CptCredentialTemplateIterator is returned from FilterCredentialTemplate and is used to iterate over the raw logs and unpacked data for CredentialTemplate events raised by the Cpt contract.
type CptCredentialTemplateIterator struct {
	Event *CptCredentialTemplate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CptCredentialTemplateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CptCredentialTemplate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CptCredentialTemplate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CptCredentialTemplateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CptCredentialTemplateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CptCredentialTemplate represents a CredentialTemplate event raised by the Cpt contract.
type CptCredentialTemplate struct {
	CptId               *big.Int
	CredentialPublicKey []byte
	CredentialProof     []byte
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterCredentialTemplate is a free log retrieval operation binding the contract event 0x474faf3aa6d5f61cba0888d71cc5e409fb0ec6d76c3da540ad881c925a419c99.
//
// Solidity: event CredentialTemplate(uint256 cptId, bytes credentialPublicKey, bytes credentialProof)
func (_Cpt *CptFilterer) FilterCredentialTemplate(opts *bind.FilterOpts) (*CptCredentialTemplateIterator, error) {

	logs, sub, err := _Cpt.contract.FilterLogs(opts, "CredentialTemplate")
	if err != nil {
		return nil, err
	}
	return &CptCredentialTemplateIterator{contract: _Cpt.contract, event: "CredentialTemplate", logs: logs, sub: sub}, nil
}

// WatchCredentialTemplate is a free log subscription operation binding the contract event 0x474faf3aa6d5f61cba0888d71cc5e409fb0ec6d76c3da540ad881c925a419c99.
//
// Solidity: event CredentialTemplate(uint256 cptId, bytes credentialPublicKey, bytes credentialProof)
func (_Cpt *CptFilterer) WatchCredentialTemplate(opts *bind.WatchOpts, sink chan<- *CptCredentialTemplate) (event.Subscription, error) {

	logs, sub, err := _Cpt.contract.WatchLogs(opts, "CredentialTemplate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CptCredentialTemplate)
				if err := _Cpt.contract.UnpackLog(event, "CredentialTemplate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCredentialTemplate is a log parse operation binding the contract event 0x474faf3aa6d5f61cba0888d71cc5e409fb0ec6d76c3da540ad881c925a419c99.
//
// Solidity: event CredentialTemplate(uint256 cptId, bytes credentialPublicKey, bytes credentialProof)
func (_Cpt *CptFilterer) ParseCredentialTemplate(log types.Log) (*CptCredentialTemplate, error) {
	event := new(CptCredentialTemplate)
	if err := _Cpt.contract.UnpackLog(event, "CredentialTemplate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CptRegisterCptRetLogIterator is returned from FilterRegisterCptRetLog and is used to iterate over the raw logs and unpacked data for RegisterCptRetLog events raised by the Cpt contract.
type CptRegisterCptRetLogIterator struct {
	Event *CptRegisterCptRetLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CptRegisterCptRetLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CptRegisterCptRetLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CptRegisterCptRetLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CptRegisterCptRetLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CptRegisterCptRetLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CptRegisterCptRetLog represents a RegisterCptRetLog event raised by the Cpt contract.
type CptRegisterCptRetLog struct {
	RetCode    *big.Int
	CptId      *big.Int
	CptVersion *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterRegisterCptRetLog is a free log retrieval operation binding the contract event 0xa17f6f29c43d53fdf8a8d5fc788d118621cdca690e8ee29962c3e2fbe70d5eb3.
//
// Solidity: event RegisterCptRetLog(uint256 retCode, uint256 cptId, int256 cptVersion)
func (_Cpt *CptFilterer) FilterRegisterCptRetLog(opts *bind.FilterOpts) (*CptRegisterCptRetLogIterator, error) {

	logs, sub, err := _Cpt.contract.FilterLogs(opts, "RegisterCptRetLog")
	if err != nil {
		return nil, err
	}
	return &CptRegisterCptRetLogIterator{contract: _Cpt.contract, event: "RegisterCptRetLog", logs: logs, sub: sub}, nil
}

// WatchRegisterCptRetLog is a free log subscription operation binding the contract event 0xa17f6f29c43d53fdf8a8d5fc788d118621cdca690e8ee29962c3e2fbe70d5eb3.
//
// Solidity: event RegisterCptRetLog(uint256 retCode, uint256 cptId, int256 cptVersion)
func (_Cpt *CptFilterer) WatchRegisterCptRetLog(opts *bind.WatchOpts, sink chan<- *CptRegisterCptRetLog) (event.Subscription, error) {

	logs, sub, err := _Cpt.contract.WatchLogs(opts, "RegisterCptRetLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CptRegisterCptRetLog)
				if err := _Cpt.contract.UnpackLog(event, "RegisterCptRetLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRegisterCptRetLog is a log parse operation binding the contract event 0xa17f6f29c43d53fdf8a8d5fc788d118621cdca690e8ee29962c3e2fbe70d5eb3.
//
// Solidity: event RegisterCptRetLog(uint256 retCode, uint256 cptId, int256 cptVersion)
func (_Cpt *CptFilterer) ParseRegisterCptRetLog(log types.Log) (*CptRegisterCptRetLog, error) {
	event := new(CptRegisterCptRetLog)
	if err := _Cpt.contract.UnpackLog(event, "RegisterCptRetLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CptUpdateCptRetLogIterator is returned from FilterUpdateCptRetLog and is used to iterate over the raw logs and unpacked data for UpdateCptRetLog events raised by the Cpt contract.
type CptUpdateCptRetLogIterator struct {
	Event *CptUpdateCptRetLog // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CptUpdateCptRetLogIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CptUpdateCptRetLog)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CptUpdateCptRetLog)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CptUpdateCptRetLogIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CptUpdateCptRetLogIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CptUpdateCptRetLog represents a UpdateCptRetLog event raised by the Cpt contract.
type CptUpdateCptRetLog struct {
	RetCode    *big.Int
	CptId      *big.Int
	CptVersion *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateCptRetLog is a free log retrieval operation binding the contract event 0x2614d1ec3482cc2505bf211c39bee96c28940521311ec70c9ebf14d3896fd196.
//
// Solidity: event UpdateCptRetLog(uint256 retCode, uint256 cptId, int256 cptVersion)
func (_Cpt *CptFilterer) FilterUpdateCptRetLog(opts *bind.FilterOpts) (*CptUpdateCptRetLogIterator, error) {

	logs, sub, err := _Cpt.contract.FilterLogs(opts, "UpdateCptRetLog")
	if err != nil {
		return nil, err
	}
	return &CptUpdateCptRetLogIterator{contract: _Cpt.contract, event: "UpdateCptRetLog", logs: logs, sub: sub}, nil
}

// WatchUpdateCptRetLog is a free log subscription operation binding the contract event 0x2614d1ec3482cc2505bf211c39bee96c28940521311ec70c9ebf14d3896fd196.
//
// Solidity: event UpdateCptRetLog(uint256 retCode, uint256 cptId, int256 cptVersion)
func (_Cpt *CptFilterer) WatchUpdateCptRetLog(opts *bind.WatchOpts, sink chan<- *CptUpdateCptRetLog) (event.Subscription, error) {

	logs, sub, err := _Cpt.contract.WatchLogs(opts, "UpdateCptRetLog")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CptUpdateCptRetLog)
				if err := _Cpt.contract.UnpackLog(event, "UpdateCptRetLog", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateCptRetLog is a log parse operation binding the contract event 0x2614d1ec3482cc2505bf211c39bee96c28940521311ec70c9ebf14d3896fd196.
//
// Solidity: event UpdateCptRetLog(uint256 retCode, uint256 cptId, int256 cptVersion)
func (_Cpt *CptFilterer) ParseUpdateCptRetLog(log types.Log) (*CptUpdateCptRetLog, error) {
	event := new(CptUpdateCptRetLog)
	if err := _Cpt.contract.UnpackLog(event, "UpdateCptRetLog", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
